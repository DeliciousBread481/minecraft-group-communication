<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.github.konstantyn111.crashapi.mapper.user.UserMapper">

    <resultMap id="UserResultMap" type="com.github.konstantyn111.crashapi.entity.user.User">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="email" column="email"/>
        <result property="password" column="password"/>
        <result property="nickname" column="nickname"/>
        <result property="avatar" column="avatar"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="enabled" column="enabled"/>
        <result property="refreshToken" column="refresh_token"/>
        <result property="refreshTokenExpiry" column="refresh_token_expiry"/>
    </resultMap>

    <select id="findRolesByUserId" resultType="string">
        SELECT r.name
        FROM roles r
                 JOIN user_roles ur ON r.id = ur.role_id
        WHERE ur.user_id = #{userId}
    </select>

    <select id="findByUsername" resultMap="UserResultMap">
        SELECT * FROM users WHERE username = #{username}
    </select>

    <select id="findByEmail" resultMap="UserResultMap">
        SELECT * FROM users WHERE email = #{email}
    </select>

    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (username, email, password, nickname, avatar, created_at, updated_at, enabled, refresh_token, refresh_token_expiry)
        VALUES (#{username}, #{email}, #{password}, #{nickname}, #{avatar}, #{createdAt}, #{updatedAt}, #{enabled}, #{refreshToken}, #{refreshTokenExpiry})
    </insert>

    <update id="updateRefreshToken">
        UPDATE users SET refresh_token = #{refreshToken}, refresh_token_expiry = #{expiryDate}
        WHERE id = #{id}
    </update>

    <select id="findByIdWithRoles" resultMap="UserResultMap">
        SELECT u.*
        FROM users u
        WHERE u.id = #{id}
    </select>

    <select id="hasRole" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM user_roles ur
                 JOIN roles r ON ur.role_id = r.id
        WHERE ur.user_id = #{userId} AND r.name = #{roleName}
    </select>

    <update id="updateUserInfo">
        UPDATE users
        SET email = #{email},
            nickname = #{nickname},
            avatar = #{avatar},
            password = #{password},
            updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>

    <select id="findById" resultMap="UserResultMap">
        SELECT * FROM users WHERE id = #{id}
    </select>

    <insert id="addRoleToUser">
        INSERT INTO user_roles (user_id, role_id) VALUES (#{userId}, #{roleId})
    </insert>

    <select id="findAllWithRolesPaged" resultMap="UserResultMap">
        SELECT u.*
        FROM users u
        ORDER BY u.id
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="countAllUsers" resultType="long">
        SELECT COUNT(*) FROM users
    </select>

    <delete id="removeRoleFromUser">
        DELETE FROM user_roles WHERE user_id = #{userId} AND role_id = #{roleId}
    </delete>
</mapper>
