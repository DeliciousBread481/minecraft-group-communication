<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.konstantyn111.crashapi.mapper.user.UserMapper">
    <resultMap id="UserResultMap" type="com.github.konstantyn111.crashapi.entity.user.User">
        <id property="id" column="id" />
        <result property="username" column="username" />
        <result property="email" column="email" />
        <result property="password" column="password" />
        <result property="nickname" column="nickname" />
        <result property="avatar" column="avatar" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="enabled" column="enabled" />
        <result property="refreshToken" column="refresh_token"/>
        <result property="refreshTokenExpiry" column="refresh_token_expiry"/>

        <collection property="roles" ofType="com.github.konstantyn111.crashapi.entity.user.Role">
            <id property="id" column="role_id" />
            <result property="name" column="role_name" />
            <result property="description" column="role_description" />
        </collection>
    </resultMap>

    <select id="findByUsername" resultType="com.github.konstantyn111.crashapi.entity.user.User">
        SELECT * FROM users WHERE username = #{username}
    </select>

    <select id="findByEmail" resultType="com.github.konstantyn111.crashapi.entity.user.User">
        SELECT * FROM users WHERE email = #{email}
    </select>

    <insert id="save" parameterType="com.github.konstantyn111.crashapi.entity.user.User"
            useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO users
        (username, email, password, nickname, avatar, created_at, updated_at, enabled, refresh_token, refresh_token_expiry)
        VALUES
            (#{username}, #{email}, #{password}, #{nickname}, #{avatar},
             #{createdAt}, #{updatedAt}, #{enabled}, #{refreshToken}, #{refreshTokenExpiry})
    </insert>

    <update id="updateRefreshToken">
        UPDATE users
        SET
            refresh_token = #{refreshToken},
            refresh_token_expiry = #{expiryDate}
        WHERE id = #{id}
    </update>

    <select id="findByIdWithRoles" resultMap="UserResultMap">
        SELECT
            u.*,
            r.id AS role_id,
            r.name AS role_name,
            r.description AS role_description
        FROM users u
                 LEFT JOIN user_roles ur ON u.id = ur.user_id
                 LEFT JOIN roles r ON ur.role_id = r.id
        WHERE u.id = #{id}
    </select>

    <select id="hasRole" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM user_roles ur
                 JOIN roles r ON ur.role_id = r.id
        WHERE ur.user_id = #{userId} AND r.name = #{roleName}
    </select>

    <update id="updateUserInfo" parameterType="com.github.konstantyn111.crashapi.entity.user.User">
        UPDATE users
        SET
            email = #{email},
            nickname = #{nickname},
            avatar = #{avatar},
            password = #{password},
            updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>

    <select id="findById" resultType="com.github.konstantyn111.crashapi.entity.user.User">
        SELECT * FROM users WHERE id = #{id}
    </select>

    <insert id="addRoleToUser">
        INSERT INTO user_roles (user_id, role_id)
        VALUES (#{userId}, #{roleId})
    </insert>

    <select id="findAllWithRolesPaged" resultMap="UserResultMap">
        SELECT u.*,
               r.id          AS role_id,
               r.name        AS role_name,
               r.description AS role_description
        FROM users u
                 LEFT JOIN user_roles ur ON u.id = ur.user_id
                 LEFT JOIN roles r ON ur.role_id = r.id
        ORDER BY u.id
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="countAllUsers" resultType="long">
        SELECT COUNT(*) FROM users
    </select>

    <delete id="removeRoleFromUser">
        DELETE FROM user_roles
        WHERE user_id = #{userId} AND role_id = #{roleId}
    </delete>
</mapper>